type Purpose @entity {
  id: ID!
  sender: Sender!
  purpose: String!
  createdAt: BigInt!
  transactionHash: String!
}

type Sender @entity {
  id: ID!
  address: Bytes!
  purposes: [Purpose!] @derivedFrom(field: "sender")
  createdAt: BigInt!
  purposeCount: BigInt!
}

# WORKAROUND: there's no `console.log` functionality in mapping.
# so we use `debug(..)` which writes a `Debug` entity to the store so you can see them in graphiql.
# https://github.com/daostack/subgraph/blob/master/src/domain/schema.graphql
type Debug @entity {
	id: ID!
	message: String!
}


# https://github.com/Amxx/subgraphs/blob/80a66df2d109fea3c1c0d41b5f3df5345f811ed6/subgraphs/eip1155/schema.graphql

type Account @entity {
	id:                           ID!
	balances:                     [Balance!]! @derivedFrom(field: "account")
	transfersOperator:            [Transfer!]! @derivedFrom(field: "operator")
	transfersFrom:                [Transfer!]! @derivedFrom(field: "from")
	transfersTo:                  [Transfer!]! @derivedFrom(field: "to")
	approvalsOwner:               [Approval!]! @derivedFrom(field: "owner")
	approvalsSpender:             [Approval!]! @derivedFrom(field: "spender")
}

# Not sure how this could be useful
# type TokenRegistry @entity {
# 	id:                           ID!
# 	tokens:                       [Token!]! @derivedFrom(field: "registry")
# }

type TokenType @entity {
	id: 						  ID!
	name: 						  String!
	tokens:						  [Token!]! @derivedFrom(field: "tokenType")
	authorizedChildren:			  [TokenTypeRelationship!] @derivedFrom(field: "parent")
	authorizedParents: 			  [TokenTypeRelationship!] @derivedFrom(field: "child")
}

type TokenTypeRelationship @entity {
	# Set to `${parent.id}-${child.id}`
	id:                           ID!
	parent:                       TokenType!
	child:                        TokenType!
}

type Token @entity {
	id:                           ID!
	# registry:                     TokenRegistry!
	identifier:                   BigInt!
	uri:                          String
	totalSupply:                  BigInt!
	tokenType: 					  TokenType!
	children:					  [TokenRelationship!] @derivedFrom(field: "parent")
	parents:					  [TokenRelationship!] @derivedFrom(field: "child")
	# TYPE????
	balances:                     [Balance!]! @derivedFrom(field: "token")
	transfers:                    [Transfer!]! @derivedFrom(field: "token")
	approvals:                    [Approval!]! @derivedFrom(field: "token")
}

# https://thegraph.com/docs/define-a-subgraph#reverse-lookups
type TokenRelationship @entity {
	# Set to `${parent.id}-${child.id}`
	id:                           ID!
	parent:                       Token!
	child:                        Token!
}

type Balance @entity {
	id:                           ID!
	token:                        Token!
	account:                      Account!
	value:                        BigInt!
	transfersFrom:                [Transfer!]! @derivedFrom(field: "fromBalance")
	transfersTo:                  [Transfer!]! @derivedFrom(field: "toBalance")
}

type Transaction @entity {
	id:                           ID!
	timestamp:                    BigInt!
	blockNumber:                  BigInt!
	events:                       [Event!]! @derivedFrom(field: "transaction")
}

###############################################
# EVENTS
###############################################

interface Event {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
}

type Transfer implements Event @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	token:                        Token!
	operator:                     Account!
	from:                         Account!
	fromBalance:                  Balance
	to:                           Account!
	toBalance:                    Balance
	value:                        BigInt!
}

# TODO this will be different approval that we want to track
type Approval implements Event @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	token:                        Token!
	owner:                        Account!
	spender:                      Account!
	value:                        BigInt!
}

type DecimalValue @entity {
	id:                           ID!
	value:                        BigDecimal!
	exact:                        BigInt!
	decimals:                     Int!
}

type PersistentStringArray @entity {
	id:                           ID!
	values:                       [String!]!
}

type PersistentString @entity {
	id:                           ID!
	value:                        String!
}
